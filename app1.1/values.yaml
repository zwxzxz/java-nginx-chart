# 是否前端应用(是输入true)
isFrontend: 
# 应用名(必填!!!)
name: 
# 强行指定命名空间
nameSpace: 
# 镜像信息
image:
  # 仓库
  registry: 
  # 镜像组(必填!!!)
  repository: 
  # 标签(必填!!!)
  tag: latest
  # 拉取策略：值：IfNotPresent/Always/Never
  pullPolicy: Always
  # 镜像拉取Secret
  pullSecret: 

# 容器声明端口(默认：前端:80,后端:8080)
containerPort: 

# 扩展容器声明端口
extraContainerPort:
  # - name: https
  #   containerPort: 443

# 创建service(关注应用是否有需求,一般只需gateway和前端需要)
createService: 

# 副本数
replicaCount: 1

# 挂载
mount:
  # 容器内挂载地址(不挂载设置[]或者为空)
  volumeMounts: 
    # - name: volume-platforms-statics
    #   mountPath: /data
  # 卷
  volumes: 
    # - name: volume-platforms-statics
    #   nfs:
    #     path: /data/nfs_k8s/platforms/dataPlatform
    #     server: k8s-master

# 环境变量
env:
  - name: TZ
    value: Asia/Shanghai
  - name: LANG
    value: C.UTF-8
    
# jvm参数(只有后端可用)
JAVA_OPTS: -XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0

# pod注解
podAnnotations:
  # test/xxx: 'true'

# service
service:
  # 服务类型可选: ClusterIP/NodePort/LoadBalancer
  type: ClusterIP
  ports:
    name: http
    # 不填写使用containerPort
    port: 
    # 不填写使用containerPort
    targetPort: http
    # type为NodePort时,不填写则随机生成nodePort
    nodePort: 

  # 扩展其他端口
  extraPorts: 
  # - name: xxx
  #   port: 7613
  #   targetPort: 7613
  #   nodePort: 31112

  # 会话保持: None/ClientIP
  sessionAffinity: 
  # 超时时间, sessionAffinity设置为ClientIP才有效
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  # 外部流量策略: Cluster/Local
  externalTrafficPolicy:
  # 限制可以访问负载均衡器的源IP地址段
  loadBalancerSourceRanges: 
    # - 10.10.10.0/24
    # - 192.0.2.0/24
  # type为LoadBalancer时才需要填写负载均衡Ip
  loadBalancerIP: 


# 资源
resources:
  # 请求资源(不使用设置{}或者为空)
  requests: 
    cpu: 30m
    memory: 256Mi
  # 限制资源
  limits: 
    # cpu: 200m
    memory: 1Gi

# 探针(仅后端生效)
probe:
  # 总开关(关了所有不可用)
  enabled: true

  # 容器启动检查探针
  startupProbe:
    enabled: true
    #2分钟启动时间
    httpGet:
      path: /actuator/health
      port: http
    failureThreshold: 24
    periodSeconds: 4

  # 容器存活检查探针
  livenessProbe:
    enabled: true
    #1分钟4次,3次失败重启
    httpGet:
      path: /actuator/health
      port: http
    timeoutSeconds: 5
    periodSeconds: 10
  
  # 容器就绪检查探针,3次失败Service停止分发
  readinessProbe:
    enabled: true
    #1分钟4次
    httpGet:
      path: /actuator/health
      port: http
    timeoutSeconds: 5
    periodSeconds: 10
  

  # 自定义容器启动检查探针
  customStartupProbe:
    # tcpSocket:
    #   port: http
    # #失败次数
    # failureThreshold: 3
    # #首次检查延迟时间
    # initialDelaySeconds: 30
    # #多久探测一次
    # periodSeconds: 10
    # #检查失败后重新认定检查成功的检查次数
    # successThreshold: 1
    # #探测超时时间
    # timeoutSeconds: 1

  # 自定义容器存活检查探针
  customLivenessProbe:
    # exec:
    #   command:
    #     - sh
    #     - '-c'
    #     - |
    #       if grep -q "ERROR" /logs/vbooster/error.*.log; then
    #         exit 1
    #       else
    #         exit 0
    #       fi
    # failureThreshold: 3
    # initialDelaySeconds: 3000
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1

  # 自定义容器就绪检查探针
  customReadinessProbe:
    # httpGet:
    #   path: /actuator/prometheus
    #   port: http
    #   scheme: HTTP
    # failureThreshold: 3
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1


# 监控(只有后端有用)
metrics:
  # 是否启用 Prometheus 监控指标
  enabled: true
  # 指标路径
  path: /actuator/prometheus
